import java.awt.Color;
import java.awt.FontMetrics;
import java.awt.Graphics;
import java.io.File;
import java.util.List;
import java.util.Map;

import javax.swing.JFrame;
import javax.swing.JPanel;

public class GUI2 {

	private static JFrame frame;
	//	DataPreprocess dp =new DataPreprocess();
	//	List<Map.Entry<String, Integer>> list =dp.sortHash();
	public JPanel P;


	/**
	 * Launch the application.
	 */
	public static void main(String[] args) {

		ShakesVisFrame FRAME = new ShakesVisFrame();  
		FRAME.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); 
		//		FRAME.getContentPane().setLayout(null);
		FRAME.setVisible(true); 
	}
}

class ShakesVisFrame extends JFrame {
	private static final int DEFAULT_WIDTH = 800;  
	private static final int DEFAULT_HEIGHT = 800;  
	public ShakesVisFrame() {
		setTitle("ShakesVis");  
		setSize(DEFAULT_WIDTH, DEFAULT_HEIGHT);  
		WordFrequencyPanel wfpanel = new WordFrequencyPanel(80, 20, 10,  "D:\\dataProcess\\SHAKESPEAREbaseText.txt"); 
		WordFrequencyPanel gundolfPanel = new WordFrequencyPanel(160, 10,20, "D:\\dataProcess\\SHAKESPEAREbaseText.txt"); 
		
		

		getContentPane().add(wfpanel);
		//        add(wfpanel);
		wfpanel.setVisible(true);
		wfpanel.setBounds(0, 0, 400, 600);
		getContentPane().add(gundolfPanel);
		gundolfPanel.setBounds(500, 0, 400, 600);

	}  
}  

class WordFrequencyPanel extends JPanel {
	int x1;
	int y1;
	int y2;
	String filePathBase;
	//	 File fileBase;
	//	String filePathBase="D:\\dataProcess\\SHAKESPEAREbaseText.txt";
	//	String gundolfPath="D:\\dataProcess\\Iiii 011 gundolf.txt";
	//	File fileBase=new File(filePathBase);

	public WordFrequencyPanel(int i, int j, int k, String string) {
		// TODO Auto-generated constructor stub
		x1=i;
		y1=j;
		y2=k;
		filePathBase=string;
	}

	public void paintMyCanvas(){
		
	}
	
	@Override  
	protected void paintComponent(Graphics g) {

		File fileBase=new File(filePathBase);
		// TODO Auto-generated method stub  
		DataPreprocess dp =new DataPreprocess();
		dp.readFile(filePathBase);
		List<Map.Entry<String, Integer>> list =dp.sortHash();
		//        System.out.println(list);
		super.paintComponent(g);
		int x1=10;
		int y1=10;
		int y2=10;
		String str=null;
		int y0=30;
		int barWidth=0;
		FontMetrics fontMetrics = g.getFontMetrics();
		for (Map.Entry<String, Integer> mapping : list) {     
			str=mapping.getKey()+" "+mapping.getValue()+" ";


			g.drawString(str, x1 - fontMetrics.stringWidth(str),y1);

			y2=(5-mapping.getValue())*150+30;
			//			g.drawLine(x1+70, y1-5, 300, y2-5);

			barWidth=mapping.getValue()*20;
			g.fillRect(x1, y1-5, barWidth, 10);
			y1+=13;
		}
		g.drawLine(x1, 0, 80, y1);
		g.drawLine(300, 0, 300, y1);
	}
	
	@Override
	public void paint(Graphics g){
        super.paint(g);
        g.setColor(Color.BLACK);
        g.fillOval(100, 100, 50, 50);
    }

}  
